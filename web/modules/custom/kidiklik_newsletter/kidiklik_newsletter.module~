<?php

/**
 * @file
 * Contains kidiklik_newsletter.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;

/**
 * Implements hook_help().
 */
function kidiklik_newsletter_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the kidiklik_newsletter module.
    case 'help.page.kidiklik_newsletter':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Module permettant la création d&#039;&#039;une newsletter par la méthode kidiklik') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function kidiklik_newsletter_theme() {
  return [
    'kidiklik_newsletter' => [
      'render element' => 'children',
    ],
  ];
}



/**
 * Implements hook_form_alter().
 *
 * Add debug output container and Ajax callback.
 */
function kidiklik_newsletter_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
	
  if ($form_id == 'newsletter_form') {
    // Add empty container to the form. it gets filled with
    // the Kint output from our Ajax event callback.
    $form['debug'] = [
      '#type' => 'container',
      '#attributes' => [
        'id' => ['debug-out'],
      ],
    ];
  }

  // Here follows the code where you add the #ajax callback
  // to some field of this form. Let's say a taxonomy reference select box.
  $form['field_mev']['widget']['#ajax'] = [
    'event' => 'change',
    "disable-refocus" => FALSE,
    // Note how we declare the callback here. No :: and no [$this, 'myAjaxCallback']
    // because we are doing this from our .module file and not from within a class object.
    'callback' => 'kidiklik_newsletter_ajax_callback',
  ];
}

// The callback function, triggered by changing selection of our taxonomy select box.
function kidiklik_newsletter_ajax_callback(array &$form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  $debugOut = @Kint::dump($form_state);
  $response->addCommand(new ReplaceCommand('#debug-out', $debugOut ));
  return $response;
}