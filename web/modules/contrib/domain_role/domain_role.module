<?php

/**
 * @file
 * Contains domain_role.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\user\Entity\Role;
use Drupal\user\RoleInterface;

/**
 * Implements hook_help().
 */
function domain_role_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the domain_role module.
    case 'help.page.domain_role':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Extends Domain Access by providing per-domain user roles. With this active, selectedmust be assigned for each domain.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_ENTITY_TYPE_load.
 *
 * Transforms list of user roles to only roles present on this domain.
 */
function domain_role_user_role_load(&$entities) {
  $domain_negotiator = \Drupal::service('domain.negotiator');
  $domain = $domain_negotiator->getActiveId();
  /**
   * @var string $key
   * @var \Drupal\user\RoleInterface $role
   */
  foreach ($entities as $key => $role) {
    if (strpos($key, $domain) === 0) {
      $role_id = substr($key, strlen($domain)+1);
      $role->set('id', $role_id);
      //$role->setOriginalId($role_id);
    }
  }
}

/**
 * Implements hook_entity_type_build().
 */
function domain_role_entity_type_build(array &$entity_types) {
  if (isset($entity_types['user'])) {
    $entity_types['user']->setClass('Drupal\domain_role\Entity\DomainUser');
  }
}

/**
 * Implements hook_views_data_alter().
 */
function domain_role_views_data_alter(array &$data) {
  $data['user__roles']['roles_target_id']['field'] = [
    'id' => 'domain_roles',
    'field' => 'roles_target_id',
    'title' => t('Role (Domain-aware)'),
    'help' => t('Show the user\'s roles'),
  ];
  $data['user__roles']['roles_target_id']['filter'] = [
    'id' => 'domain_roles',
    'field' => 'roles_target_id',
    'allow_empty' => TRUE,
    'title' => t('Domain Role filter'),
    'help' => t('Select a role filtered by this domain'),
  ];
}

/**
 * Retrieve an array of roles matching specified conditions. This is equivalent
 * to the core user_load() function.
 *
 * @param bool $membersonly
 *   (optional) Set this to TRUE to exclude the 'anonymous' role. Defaults to
 *   FALSE.
 * @param string|null $permission
 *   (optional) A string containing a permission. If set, only roles
 *   containing that permission are returned. Defaults to NULL, which
 *   returns all roles.
 * @param bool $originalrolenames
 *   (optional) Whether to return role names with the domain name specified, or
 *   the actual role name as the key.
 *
 * @return \Drupal\user\RoleInterface[]
 *   An associative array with the role id as the key and the role object as
 *   value.
 */
function domain_role_user_roles($membersonly = FALSE, $permission = NULL,
  $originalrolenames = FALSE) {
  $roles = Role::loadMultiple();
  if ($membersonly) {
    unset($roles[RoleInterface::ANONYMOUS_ID]);
  }

  if (!empty($permission)) {
    $roles = array_filter($roles, function ($role) use ($permission) {
      return $role->hasPermission($permission);
    });
  }
  $domain_roles = domain_role_ids();
  if ($originalrolenames) {
    $newroles = $roles;
  } else {
    foreach ($roles as $rolename=>$role) {
      if (in_array($rolename, $domain_roles)) {
        $newroles[_domain_role_role_id($rolename)] = $role;
      }
      else {
        $newroles[$rolename] = $role;
      }
    }
  }

  return $newroles;
}

function domain_role_ids() {
  $domain_roles = \Drupal::service('config.factory')->get('domain_role.roles')->get('domain_roles');
  return is_array($domain_roles) ? array_filter($domain_roles) : [];
}

function _domain_role_role_id($rolename) {
  static $domain_id;
  if (empty($domain_id)) {
    /** @var \Drupal\domain\DomainNegotiatorInterface $domain_negotiator */
    $domain_negotiator = \Drupal::service('domain.negotiator');
    $domain_id = $domain_negotiator->getActiveId();
  }
  return $domain_id . '-' . $rolename;
}